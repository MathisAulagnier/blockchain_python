import time
from src.blockchain import Blockchain
from src.token_manager import TokenManager
from src.wallet_manager import WalletManager
from src.pbft import PBFT  
import random

class BlockchainManager(Blockchain):
    def __init__(self, initial_supply=100, origin_wallet="wallet_creator", transaction_threshold=2):
        super().__init__()
        self.token_manager = TokenManager(max_tokens=initial_supply)  # Gestionnaire de tokens
        self.wallet_manager = WalletManager() 
        self.validators = []             # Liste des validateurs
        self.manual_votes = {}           # Dictionnaire pour les votes manuels des validateurs
        self.stakes = {}                 # Dictionnaire associant validateur et montant stak√©
        self.pbft = PBFT(self.validators, self.stakes) 
        self.transaction_threshold = transaction_threshold  # Seuil d'automatisme de commit
        self.origin_wallet = origin_wallet
        

        # Cr√©ation (ou r√©cup√©ration) du wallet d'origine
        try:
            self.wallet_manager.get_wallet(self.origin_wallet)
        except ValueError:
            self.wallet_manager.create_wallet(self.origin_wallet)
        # Cr√©ation de l'offre initiale et commit imm√©diat des transactions de cr√©ation si token n'est pas √† 0
        if initial_supply > 0:
            self.create_initial_supply(count=initial_supply + 3 , origin_wallet=self.origin_wallet)
        
    def add_transaction(self, transaction):
        """
        Ajoute une transaction (ou une liste de transactions) √† la file d'attente.
        et d√©clenche la validation d√®s que le seuil est atteint.
        """
        if isinstance(transaction, list):
            self.pending_transactions.extend(transaction)
        else:
            self.pending_transactions.append(transaction)
        
        # V√©rifier si le nombre de transactions atteint le seuil pour commiter
        if len(self.pending_transactions) >= self.transaction_threshold:
            self.commit_pending_transactions()
            
    def commit_pending_transactions(self):
        """
        Ex√©cute le processus de consensus PBFT pour valider et ajouter le bloc contenant les transactions en attente.
        Avant de lancer le consensus, affiche pour chaque transaction son type (cr√©ation, transfert, stake, unstake, etc.).
        """
        if not self.pending_transactions:
            print("Aucune transaction √† commiter.")
            return

        print("\n‚õìÔ∏è Lancement du consensus PBFT...")

        # Cr√©ation du bloc candidat en utilisant la m√©thode d√©di√©e de la classe Blockchain
        candidate_block = self.create_candidate_block(self.pending_transactions.copy())

        # Affichage des transactions du bloc candidat avec leur type
        print("Transactions dans le bloc candidat :")
        for tx in candidate_block.transactions:
            # On suppose que chaque transaction est un dictionnaire avec une cl√© "action"
            action = tx.get("action", "inconnue")
            if action == "token_creation":
                print("  - Cr√©ation de tokens pour wallet:", tx.get("owner"))
            elif action == "transfer":
                print("  - Transfert de token {} de {} vers {}".format(tx.get("token_id"), tx.get("from"), tx.get("to")))
            elif action == "stake":
                print("  - Staking du token {} pour {}".format(tx.get("token_id"), tx.get("address")))
            elif action == "unstake":
                print("  - Unstaking du token {} pour {}".format(tx.get("token_id"), tx.get("address")))
            else:
                print("  - Transaction de type {}: {}".format(action, tx))

        # S√©lection du leader gr√¢ce au m√©canisme PoS
        leader = self.choose_validator()
        print("üßë‚Äç‚öñÔ∏è Validateur choisi (leader) :", leader)

        # Phase de pre-prepare : appel de la m√©thode du protocole PBFT
        self.pbft.pre_prepare(candidate_block, leader)

        # Phase de prepare : chaque validateur vote sur le bloc candidat
        for validator in self.validators:
            vote = self.decide_vote(validator, candidate_block)
            print(f"üó≥Ô∏è {validator} vote {'‚úÖ' if vote else '‚ùå'}")
            self.pbft.prepare(candidate_block, validator, vote)

        # Phase de commit : obtenir le r√©sultat du consensus
        success, message = self.pbft.commit(candidate_block)
        print(message)

        if success:
            signature = self.pbft.get_consensus_signature(candidate_block)
            self.add_block(leader, signature)
            print(f"‚úÖ Bloc {candidate_block.index} ajout√© !\n")
            #Print hash 
            print(f"Hash du bloc {candidate_block.index} : {candidate_block.hash}\n")

        else:
            print("‚ùå Consensus √©chou√©, annulation des TX...\n")
            for undo in reversed(self.pending_rollbacks):
                try:
                    undo()
                except Exception as e:
                    print(f"[ROLLBACK ERREUR] {e}")
            self.pending_transactions.clear()
            self.pending_rollbacks.clear()


    def decide_vote(self, validator, block):
        """
        Retourne le vote d√©fini manuellement pour le validateur.
        Si aucun vote n'est d√©fini, retourne True par d√©faut.
        """
        return self.manual_votes.get(validator, True)

    
    def create_initial_supply(self, count=248, origin_wallet="wallet_creator"):
        """
        Cr√©e l'offre initiale de tokens et les attribue au wallet d'origine.
        La transaction de cr√©ation est ajout√©e aux transactions en attente
        puis committ√©e imm√©diatement dans un bloc unique.
        
        Ce bloc unique inclut :
        - La cr√©ation initiale des tokens,
        - Le transfert des tokens vers les wallets de base (wallet_Lina, wallet_Mathis, wallet_JJ),
        - Le staking (1 token) de chacun de ces wallets pour qu'ils deviennent validateurs.
        """
        # Pour s'assurer que toutes les transactions sont regroup√©es dans un seul bloc,
        # on d√©sactive temporairement le d√©clenchement automatique du commit.
        original_threshold = self.transaction_threshold
        self.transaction_threshold = 10**9  # Valeur tr√®s √©lev√©e pour √©viter les commits interm√©diaires

        # --- Cr√©ation des tokens initiaux ---
        tokens = self.token_manager.create_initial_tokens(count)
        try:
            owner_wallet = self.wallet_manager.get_wallet(origin_wallet)
        except ValueError:
            owner_wallet = self.wallet_manager.create_wallet(origin_wallet)
        for token in tokens:
            owner_wallet.deposit_token(token.identifier, stake=False)
        token_data = [token.to_dict() for token in tokens]
        # Ajout de la transaction de cr√©ation des tokens
        self.pending_transactions.append({
            "action": "token_creation",
            "owner": origin_wallet,
            "tokens": token_data
        })
        
        # --- Cr√©ation et staking des wallets initiaux ---
        # On cr√©e et cr√©dite trois wallets de base, puis on stake 1 token pour chacun.
        self.create_and_stake_initial_wallet("wallet_Lina", initial_credit=15, stake_count=1)
        self.create_and_stake_initial_wallet("wallet_Mathis", initial_credit=15, stake_count=1)
        self.create_and_stake_initial_wallet("wallet_JJ", initial_credit=15, stake_count=1)
        
        self.add_block(origin_wallet, "INITIAL_SUPPLY")
        # On vide la file des transactions en attente
        self.pending_transactions = []
        self.pending_rollbacks = []
        
        # Restauration du seuil de commit d'origine
        self.transaction_threshold = original_threshold
        
        return tokens

    def transfer_token(self, token_id, from_address, to_address):
        """
        Transf√®re un token d'un wallet √† un autre et ajoute la transaction en file.
        Le transfert n'est pas imm√©diatement valid√© par la cr√©ation d'un bloc.
        """
        from_w = self.wallet_manager.get_wallet(from_address)
        to_w   = self.wallet_manager.get_wallet(to_address)
        if token_id not in from_w.available_tokens:
            raise ValueError("Token non dispo")
        from_w.withdraw_token(token_id)
        to_w.deposit_token(token_id, stake=False)
        # rollback
        def undo():
            w_to = self.wallet_manager.get_wallet(to_address)
            w_from = self.wallet_manager.get_wallet(from_address)
            w_to.withdraw_token(token_id)
            w_from.deposit_token(token_id, stake=False)
        self.pending_rollbacks.append(undo)
        tx = {
            "action": "transfer",
            "token_id": token_id,
            "from": from_address,
            "to": to_address,
            "timestamp": time.time()
        }
        self.add_transaction(tx)
        return tx

    def stake_token(self, token_id, address):
        """
        D√©place un token du solde disponible vers le solde stak√© dans le wallet sp√©cifi√©,
        et ajoute la transaction en file.
        """
        wallet = self.wallet_manager.get_wallet(address)
        if token_id not in wallet.available_tokens:
            raise ValueError(f"Token {token_id} n'est pas disponible dans le wallet {address} pour √™tre stak√©")
        wallet.stake_token(token_id)
        def undo():
            self.wallet_manager.get_wallet(address).unstake_token(token_id)
        self.pending_rollbacks.append(undo)
        transaction = {
            "action": "stake",
            "token_id": token_id,
            "address": address,
            "timestamp": time.time()
        }
        self.add_transaction(transaction)
        self.register_validator(address, stake=1)
        return transaction

    def unstake_token(self, token_id, address):
        """
        D√©place un token du solde stak√© vers le solde disponible du wallet sp√©cifi√©,
        et ajoute la transaction en file.
        """
        wallet = self.wallet_manager.get_wallet(address)
        if token_id not in wallet.staked_tokens:
            raise ValueError(f"Token {token_id} n'est pas en staking dans le wallet {address}")
        wallet.unstake_token(token_id)
        def undo():
            self.wallet_manager.get_wallet(address).stake_token(token_id)
        self.pending_rollbacks.append(undo)
        transaction = {
            "action": "unstake",
            "token_id": token_id,
            "address": address,
            "timestamp": time.time()
        }
        self.add_transaction(transaction)
        return transaction

    def get_token_history(self, token_id):
        """Retourne l'historique des transactions pour un token sp√©cifique."""
        token_transactions = []
        for block in self.chain:
            for transaction in block.transactions:
                # Si la transaction individuelle concerne ce token
                if isinstance(transaction, dict) and transaction.get("token_id") == token_id:
                    t = transaction.copy()
                    t["block_hash"] = block.hash
                    t["block_index"] = block.index
                    token_transactions.append(t)
                # Pour une transaction group√©e de cr√©ation
                elif (isinstance(transaction, dict) and 
                      transaction.get("action") == "token_creation" and 
                      "tokens" in transaction):
                    for token_data in transaction["tokens"]:
                        if token_data.get("identifier") == token_id:
                            creation_info = {
                                "action": "creation",
                                "token_id": token_id,
                                "timestamp": block.timestamp,
                                "block_hash": block.hash,
                                "block_index": block.index
                            }
                            token_transactions.append(creation_info)
        return token_transactions

    def get_token_by_index(self, index):
        """R√©cup√®re un token par son index dans la liste des tokens."""
        all_tokens = self.token_manager.get_all_tokens()
        if 0 <= index < len(all_tokens):
            return all_tokens[index]
        return None

    def get_staking_stats(self):
        all_tokens = self.token_manager.get_all_tokens()
        total_tokens = len(all_tokens)
        total_staked = sum(len(wallet.staked_tokens) for wallet in self.wallet_manager.wallets.values())
        staking_percentage = (total_staked / total_tokens * 100) if total_tokens > 0 else 0
        total_value = self.token_manager.get_tokens_value()
        single_value = total_value / total_tokens if total_tokens > 0 else 0
        return {
            "total_tokens": total_tokens,
            "staking_tokens": total_staked,
            "staking_percentage": staking_percentage,
            "total_value": total_value,
            "staking_value": single_value * total_staked
        }

    def create_wallet_for_user(self, user_address, initial_credit=5):
        """
        Cr√©e un nouveau wallet pour un utilisateur et le cr√©dite automatiquement avec un nombre fixe de tokens
        provenant du wallet d'origine.
        """
        new_wallet = self.wallet_manager.create_wallet(user_address)
        origin = self.origin_wallet
        origin_wallet = self.wallet_manager.get_wallet(origin)
        available_tokens = list(origin_wallet.available_tokens)
        if len(available_tokens) < initial_credit:
            raise ValueError("Tokens insuffisants dans le wallet d'origine pour cr√©diter le nouveau wallet")
        for token_id in available_tokens[:initial_credit]:
            self.transfer_token(token_id, origin, user_address)
        return new_wallet
    
    def create_initial_wallet(self, user_address, initial_credit=5):
        """
        Cr√©e un nouveau wallet pour un utilisateur et le cr√©dite automatiquement avec un nombre fixe de tokens
        provenant du wallet d'origine.
        Cette fonction est destin√©e √† √™tre utilis√©e lors de l'initialisation de la blockchain
        et ajoute les transferts dans pending_transactions sans d√©clencher de commit.
        """
        new_wallet = self.wallet_manager.create_wallet(user_address)
        origin = self.origin_wallet
        origin_wallet = self.wallet_manager.get_wallet(origin)
        available_tokens = list(origin_wallet.available_tokens)
        if len(available_tokens) < initial_credit:
            raise ValueError("Tokens insuffisants dans le wallet d'origine pour cr√©diter " + user_address)
        for token_id in available_tokens[:initial_credit]:
            origin_wallet.withdraw_token(token_id)
            new_wallet.deposit_token(token_id, stake=False)
            transaction = {
                "action": "transfer",
                "token_id": token_id,
                "from": origin,
                "to": user_address,
                "timestamp": time.time()
            }
            self.pending_transactions.append(transaction)
        return new_wallet

    
    def create_and_stake_initial_wallet(self, user_address, initial_credit, stake_count=1):
        """
        Cr√©e un nouveau wallet pour un utilisateur (via create_initial_wallet) et le cr√©dite 
        avec un nombre fixe de tokens provenant du wallet d'origine. Ensuite, pour simuler
        que ce wallet devient validateur, il stake 'stake_count' tokens (c'est-√†-dire retire
        le ou les tokens du solde disponible et les place dans le solde stak√© via stake_token).
        
        La transaction de transfert est ajout√©e √† pending_transactions et sera incluse dans le bloc initial.
        """
        # Cr√©e le wallet et effectue les transferts directs (sans commit)
        wallet = self.create_initial_wallet(user_address, initial_credit)
        # Pour chaque token √† staker (au nombre de stake_count), on effectue le staking
        for _ in range(stake_count):
            available = list(wallet.available_tokens)
            if not available:
                break
            token_id = available[0]  # On choisit le premier token disponible
            # Utilise la m√©thode stake_token qui ajoute une transaction "stake" et inscrit le validateur
            self.stake_token(token_id, user_address)
        return wallet


    def register_validator(self, validator, stake):
        """
        Enregistre un validateur et met √† jour son stake.
        """
        if validator not in self.validators:
            self.validators.append(validator)
        self.stakes[validator] = self.stakes.get(validator, 0) + stake

    def choose_validator(self):
        """
        S√©lectionne un validateur de mani√®re pond√©r√©e en fonction du stake.
        Un nombre al√©atoire est tir√© pour choisir parmi les validateurs en proportion de leur stake.
        :return: L'identifiant du validateur s√©lectionn√©
        """
        total_stake = sum(self.stakes.values())
        pick = random.uniform(0, total_stake)
        current = 0
        for validator, stake in self.stakes.items():
            current += stake
            if current > pick:
                return validator
        return None   